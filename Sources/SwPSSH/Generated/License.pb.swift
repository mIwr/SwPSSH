// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: License.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct WidevinePsshData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Entitlement or content key IDs. Can onnly present in SINGLE or ENTITLEMENT
  /// PSSHs. May be repeated to facilitate delivery of multiple keys in a
  /// single license. Cannot be used in conjunction with content_id or
  /// group_ids, which are the preferred mechanism.
  public var keyIds: [Data] = []

  /// Content identifier which may map to multiple entitlement or content key
  /// IDs to facilitate the delivery of multiple keys in a single license.
  /// Cannot be present in conjunction with key_ids, but if used must be in all
  /// PSSHs.
  public var contentID: Data {
    get {return _contentID ?? Data()}
    set {_contentID = newValue}
  }
  /// Returns true if `contentID` has been explicitly set.
  public var hasContentID: Bool {return self._contentID != nil}
  /// Clears the value of `contentID`. Subsequent reads from it will return its default value.
  public mutating func clearContentID() {self._contentID = nil}

  /// Crypto period index, for media using key rotation. Always corresponds to
  /// The content key period. This means that if using entitlement licensing
  /// the ENTITLED_KEY PSSHs will have sequential crypto_period_index's, whereas
  /// the ENTITELEMENT PSSHs will have gaps in the sequence. Required if doing
  /// key rotation.
  public var cryptoPeriodIndex: UInt32 {
    get {return _cryptoPeriodIndex ?? 0}
    set {_cryptoPeriodIndex = newValue}
  }
  /// Returns true if `cryptoPeriodIndex` has been explicitly set.
  public var hasCryptoPeriodIndex: Bool {return self._cryptoPeriodIndex != nil}
  /// Clears the value of `cryptoPeriodIndex`. Subsequent reads from it will return its default value.
  public mutating func clearCryptoPeriodIndex() {self._cryptoPeriodIndex = nil}

  /// Protection scheme identifying the encryption algorithm. The protection
  /// scheme is represented as a uint32 value. The uint32 contains 4 bytes each
  /// representing a single ascii character in one of the 4CC protection scheme
  /// values. To be deprecated in favor of signaling from content.
  /// 'cenc' (AES-CTR) protection_scheme = 0x63656E63,
  /// 'cbc1' (AES-CBC) protection_scheme = 0x63626331,
  /// 'cens' (AES-CTR pattern encryption) protection_scheme = 0x63656E73,
  /// 'cbcs' (AES-CBC pattern encryption) protection_scheme = 0x63626373.
  public var protectionScheme: UInt32 {
    get {return _protectionScheme ?? 0}
    set {_protectionScheme = newValue}
  }
  /// Returns true if `protectionScheme` has been explicitly set.
  public var hasProtectionScheme: Bool {return self._protectionScheme != nil}
  /// Clears the value of `protectionScheme`. Subsequent reads from it will return its default value.
  public mutating func clearProtectionScheme() {self._protectionScheme = nil}

  /// Optional. For media using key rotation, this represents the duration
  /// of each crypto period in seconds.
  public var cryptoPeriodSeconds: UInt32 {
    get {return _cryptoPeriodSeconds ?? 0}
    set {_cryptoPeriodSeconds = newValue}
  }
  /// Returns true if `cryptoPeriodSeconds` has been explicitly set.
  public var hasCryptoPeriodSeconds: Bool {return self._cryptoPeriodSeconds != nil}
  /// Clears the value of `cryptoPeriodSeconds`. Subsequent reads from it will return its default value.
  public mutating func clearCryptoPeriodSeconds() {self._cryptoPeriodSeconds = nil}

  /// Type of PSSH. Required if not SINGLE.
  public var type: WidevinePsshData.TypeEnum {
    get {return _type ?? .single}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// Key sequence for Widevine-managed keys. Optional.
  public var keySequence: UInt32 {
    get {return _keySequence ?? 0}
    set {_keySequence = newValue}
  }
  /// Returns true if `keySequence` has been explicitly set.
  public var hasKeySequence: Bool {return self._keySequence != nil}
  /// Clears the value of `keySequence`. Subsequent reads from it will return its default value.
  public mutating func clearKeySequence() {self._keySequence = nil}

  /// Group identifiers for all groups to which the content belongs. This can
  /// be used to deliver licenses to unlock multiple titles / channels.
  /// Optional, and may only be present in ENTITLEMENT and ENTITLED_KEY PSSHs, and
  /// not in conjunction with key_ids.
  public var groupIds: [Data] = []

  /// Copy/copies of the content key used to decrypt the media stream in which
  /// the PSSH box is embedded, each wrapped with a different entitlement key.
  /// May also contain sub-licenses to support devices with OEMCrypto 13 or
  /// older. May be repeated if using group entitlement keys. Present only in
  /// PSSHs of type ENTITLED_KEY.
  public var entitledKeys: [WidevinePsshData.EntitledKey] = []

  /// Video feature identifier, which is used in conjunction with |content_id|
  /// to determine the set of keys to be returned in the license. Cannot be
  /// present in conjunction with |key_ids|.
  /// Current values are "HDR".
  public var videoFeature: String {
    get {return _videoFeature ?? String()}
    set {_videoFeature = newValue}
  }
  /// Returns true if `videoFeature` has been explicitly set.
  public var hasVideoFeature: Bool {return self._videoFeature != nil}
  /// Clears the value of `videoFeature`. Subsequent reads from it will return its default value.
  public mutating func clearVideoFeature() {self._videoFeature = nil}

  public var algorithm: WidevinePsshData.Algorithm {
    get {return _algorithm ?? .unencrypted}
    set {_algorithm = newValue}
  }
  /// Returns true if `algorithm` has been explicitly set.
  public var hasAlgorithm: Bool {return self._algorithm != nil}
  /// Clears the value of `algorithm`. Subsequent reads from it will return its default value.
  public mutating func clearAlgorithm() {self._algorithm = nil}

  /// Content provider name.
  public var provider: String {
    get {return _provider ?? String()}
    set {_provider = newValue}
  }
  /// Returns true if `provider` has been explicitly set.
  public var hasProvider: Bool {return self._provider != nil}
  /// Clears the value of `provider`. Subsequent reads from it will return its default value.
  public mutating func clearProvider() {self._provider = nil}

  /// Track type. Acceptable values are SD, HD and AUDIO. Used to
  /// differentiate content keys used by an asset.
  public var trackType: String {
    get {return _trackType ?? String()}
    set {_trackType = newValue}
  }
  /// Returns true if `trackType` has been explicitly set.
  public var hasTrackType: Bool {return self._trackType != nil}
  /// Clears the value of `trackType`. Subsequent reads from it will return its default value.
  public mutating func clearTrackType() {self._trackType = nil}

  /// The name of a registered policy to be used for this asset.
  public var policy: String {
    get {return _policy ?? String()}
    set {_policy = newValue}
  }
  /// Returns true if `policy` has been explicitly set.
  public var hasPolicy: Bool {return self._policy != nil}
  /// Clears the value of `policy`. Subsequent reads from it will return its default value.
  public mutating func clearPolicy() {self._policy = nil}

  /// Optional protected context for group content. The grouped_license is a
  /// serialized SignedMessage.
  public var groupedLicense: Data {
    get {return _groupedLicense ?? Data()}
    set {_groupedLicense = newValue}
  }
  /// Returns true if `groupedLicense` has been explicitly set.
  public var hasGroupedLicense: Bool {return self._groupedLicense != nil}
  /// Clears the value of `groupedLicense`. Subsequent reads from it will return its default value.
  public mutating func clearGroupedLicense() {self._groupedLicense = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Single PSSH to be used to retrieve content keys.
    case single // = 0

    /// Primary PSSH used to retrieve entitlement keys.
    case entitlement // = 1

    /// Secondary PSSH containing entitled key(s).
    case entitledKey // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .single
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .single
      case 1: self = .entitlement
      case 2: self = .entitledKey
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .single: return 0
      case .entitlement: return 1
      case .entitledKey: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /////////////////////////////  Deprecated Fields  ////////////////////////////
  public enum Algorithm: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unencrypted // = 0
    case aesctr // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unencrypted
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unencrypted
      case 1: self = .aesctr
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unencrypted: return 0
      case .aesctr: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct EntitledKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of entitlement key used for wrapping |key|.
    public var entitlementKeyID: Data {
      get {return _entitlementKeyID ?? Data()}
      set {_entitlementKeyID = newValue}
    }
    /// Returns true if `entitlementKeyID` has been explicitly set.
    public var hasEntitlementKeyID: Bool {return self._entitlementKeyID != nil}
    /// Clears the value of `entitlementKeyID`. Subsequent reads from it will return its default value.
    public mutating func clearEntitlementKeyID() {self._entitlementKeyID = nil}

    /// ID of the entitled key.
    public var keyID: Data {
      get {return _keyID ?? Data()}
      set {_keyID = newValue}
    }
    /// Returns true if `keyID` has been explicitly set.
    public var hasKeyID: Bool {return self._keyID != nil}
    /// Clears the value of `keyID`. Subsequent reads from it will return its default value.
    public mutating func clearKeyID() {self._keyID = nil}

    /// Wrapped key. Required.
    public var key: Data {
      get {return _key ?? Data()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {self._key = nil}

    /// IV used for wrapping |key|. Required.
    public var iv: Data {
      get {return _iv ?? Data()}
      set {_iv = newValue}
    }
    /// Returns true if `iv` has been explicitly set.
    public var hasIv: Bool {return self._iv != nil}
    /// Clears the value of `iv`. Subsequent reads from it will return its default value.
    public mutating func clearIv() {self._iv = nil}

    /// Size of entitlement key used for wrapping |key|.
    public var entitlementKeySizeBytes: UInt32 {
      get {return _entitlementKeySizeBytes ?? 0}
      set {_entitlementKeySizeBytes = newValue}
    }
    /// Returns true if `entitlementKeySizeBytes` has been explicitly set.
    public var hasEntitlementKeySizeBytes: Bool {return self._entitlementKeySizeBytes != nil}
    /// Clears the value of `entitlementKeySizeBytes`. Subsequent reads from it will return its default value.
    public mutating func clearEntitlementKeySizeBytes() {self._entitlementKeySizeBytes = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _entitlementKeyID: Data? = nil
    fileprivate var _keyID: Data? = nil
    fileprivate var _key: Data? = nil
    fileprivate var _iv: Data? = nil
    fileprivate var _entitlementKeySizeBytes: UInt32? = nil
  }

  public init() {}

  fileprivate var _contentID: Data? = nil
  fileprivate var _cryptoPeriodIndex: UInt32? = nil
  fileprivate var _protectionScheme: UInt32? = nil
  fileprivate var _cryptoPeriodSeconds: UInt32? = nil
  fileprivate var _type: WidevinePsshData.TypeEnum? = nil
  fileprivate var _keySequence: UInt32? = nil
  fileprivate var _videoFeature: String? = nil
  fileprivate var _algorithm: WidevinePsshData.Algorithm? = nil
  fileprivate var _provider: String? = nil
  fileprivate var _trackType: String? = nil
  fileprivate var _policy: String? = nil
  fileprivate var _groupedLicense: Data? = nil
}

#if swift(>=4.2)

extension WidevinePsshData.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [WidevinePsshData.TypeEnum] = [
    .single,
    .entitlement,
    .entitledKey,
  ]
}

extension WidevinePsshData.Algorithm: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [WidevinePsshData.Algorithm] = [
    .unencrypted,
    .aesctr,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension WidevinePsshData: @unchecked Sendable {}
extension WidevinePsshData.TypeEnum: @unchecked Sendable {}
extension WidevinePsshData.Algorithm: @unchecked Sendable {}
extension WidevinePsshData.EntitledKey: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension WidevinePsshData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "WidevinePsshData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "key_ids"),
    4: .standard(proto: "content_id"),
    7: .standard(proto: "crypto_period_index"),
    9: .standard(proto: "protection_scheme"),
    10: .standard(proto: "crypto_period_seconds"),
    11: .same(proto: "type"),
    12: .standard(proto: "key_sequence"),
    13: .standard(proto: "group_ids"),
    14: .standard(proto: "entitled_keys"),
    15: .standard(proto: "video_feature"),
    1: .same(proto: "algorithm"),
    3: .same(proto: "provider"),
    5: .standard(proto: "track_type"),
    6: .same(proto: "policy"),
    8: .standard(proto: "grouped_license"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._algorithm) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.keyIds) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._provider) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._contentID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._trackType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._policy) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._cryptoPeriodIndex) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self._groupedLicense) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._protectionScheme) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._cryptoPeriodSeconds) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._keySequence) }()
      case 13: try { try decoder.decodeRepeatedBytesField(value: &self.groupIds) }()
      case 14: try { try decoder.decodeRepeatedMessageField(value: &self.entitledKeys) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self._videoFeature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._algorithm {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.keyIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.keyIds, fieldNumber: 2)
    }
    try { if let v = self._provider {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._contentID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._trackType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._policy {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._cryptoPeriodIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._groupedLicense {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._protectionScheme {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._cryptoPeriodSeconds {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._keySequence {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    } }()
    if !self.groupIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.groupIds, fieldNumber: 13)
    }
    if !self.entitledKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entitledKeys, fieldNumber: 14)
    }
    try { if let v = self._videoFeature {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: WidevinePsshData, rhs: WidevinePsshData) -> Bool {
    if lhs.keyIds != rhs.keyIds {return false}
    if lhs._contentID != rhs._contentID {return false}
    if lhs._cryptoPeriodIndex != rhs._cryptoPeriodIndex {return false}
    if lhs._protectionScheme != rhs._protectionScheme {return false}
    if lhs._cryptoPeriodSeconds != rhs._cryptoPeriodSeconds {return false}
    if lhs._type != rhs._type {return false}
    if lhs._keySequence != rhs._keySequence {return false}
    if lhs.groupIds != rhs.groupIds {return false}
    if lhs.entitledKeys != rhs.entitledKeys {return false}
    if lhs._videoFeature != rhs._videoFeature {return false}
    if lhs._algorithm != rhs._algorithm {return false}
    if lhs._provider != rhs._provider {return false}
    if lhs._trackType != rhs._trackType {return false}
    if lhs._policy != rhs._policy {return false}
    if lhs._groupedLicense != rhs._groupedLicense {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WidevinePsshData.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SINGLE"),
    1: .same(proto: "ENTITLEMENT"),
    2: .same(proto: "ENTITLED_KEY"),
  ]
}

extension WidevinePsshData.Algorithm: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNENCRYPTED"),
    1: .same(proto: "AESCTR"),
  ]
}

extension WidevinePsshData.EntitledKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = WidevinePsshData.protoMessageName + ".EntitledKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entitlement_key_id"),
    2: .standard(proto: "key_id"),
    3: .same(proto: "key"),
    4: .same(proto: "iv"),
    5: .standard(proto: "entitlement_key_size_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._entitlementKeyID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._keyID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._key) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._iv) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._entitlementKeySizeBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._entitlementKeyID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._keyID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._iv {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._entitlementKeySizeBytes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: WidevinePsshData.EntitledKey, rhs: WidevinePsshData.EntitledKey) -> Bool {
    if lhs._entitlementKeyID != rhs._entitlementKeyID {return false}
    if lhs._keyID != rhs._keyID {return false}
    if lhs._key != rhs._key {return false}
    if lhs._iv != rhs._iv {return false}
    if lhs._entitlementKeySizeBytes != rhs._entitlementKeySizeBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
